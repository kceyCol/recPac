from flask import Blueprint, request, jsonify, session, send_file, render_template
import os
import base64
import random
from datetime import datetime
import speech_recognition as sr
from pydub import AudioSegment
import tempfile
import wave
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from docx import Document
from docx.shared import Inches
import time
import io
from auth import login_required
from utils import sanitize_filename, model, RECORDINGS_DIR, TRANSCRIPTIONS_DIR

audio_bp = Blueprint('audio', __name__)

# ==================== FUN√á√ÉO ROBUSTA DE DETEC√á√ÉO DE FORMATO ====================

def detect_audio_format_robust(audio_bytes):
    """
    Detecta o formato de √°udio de forma robusta para diferentes dispositivos
    Suporta: iOS, Android, Desktop Windows/Mac, diferentes codecs
    Retorna: Tupla (formato_detectado, sample_rate_estimado)
    """
    try:
        if len(audio_bytes) < 12:  # Arquivo muito pequeno
            return "Desconhecido (arquivo muito pequeno)"
        
        # Detectar por cabe√ßalhos conhecidos
        header = audio_bytes[:12]
        
        # WebM/Opus (Android, Chrome, Firefox) - Geralmente 44.1kHz ou 48kHz
        if header.startswith(b'\x1aE\xdf\xa3'):
            return ("WebM/Opus", 44100)  # Sample rate padr√£o para qualidade
        
        # WAV (Windows, Mac, dispositivos m√≥veis) - Sample rate vari√°vel
        if header.startswith(b'RIFF') and b'WAVE' in header[:12]:
            return ("WAV", 44100)  # Assumir 44.1kHz como padr√£o de qualidade
        
        # MP3 (iOS, Android, dispositivos legados) - Geralmente 44.1kHz
        if header.startswith(b'ID3') or header.startswith(b'\xff\xfb') or header.startswith(b'\xff\xf3'):
            return ("MP3", 44100)  # Sample rate padr√£o para qualidade
        
        # M4A/AAC (iOS, alguns Android) - Geralmente 44.1kHz ou 48kHz
        if header.startswith(b'ftyp') or b'mp4' in header[:12] or b'M4A' in header[:12]:
            return ("M4A/AAC", 44100)  # Sample rate padr√£o para qualidade
        
        # OGG (alguns dispositivos Linux/Android) - Geralmente 44.1kHz
        if header.startswith(b'OggS'):
            return ("OGG", 44100)  # Sample rate padr√£o para qualidade
        
        # FLAC (dispositivos de alta qualidade) - Geralmente 44.1kHz ou 48kHz
        if header.startswith(b'fLaC'):
            return ("FLAC", 44100)  # Sample rate padr√£o para qualidade
        
        # AMR (dispositivos m√≥veis antigos) - Geralmente 8kHz ou 16kHz
        if header.startswith(b'#!AMR'):
            return ("AMR", 16000)  # Sample rate baixo, ser√° corrigido automaticamente
        
        # Verificar se √© √°udio baseado em extens√£o ou conte√∫do
        # Tentar detectar por padr√µes de √°udio
        if len(audio_bytes) > 100:
            # Verificar se h√° padr√µes de √°udio comprimido
            if any(pattern in audio_bytes[:100] for pattern in [b'Opus', b'Vorbis', b'Speex']):
                return ("√Åudio Comprimido (Opus/Vorbis/Speex)", 44100)  # Assumir qualidade padr√£o
            
            # Verificar se parece ser √°udio PCM n√£o identificado
            if len(audio_bytes) % 2 == 0:  # Tamanho par (comum em PCM)
                return ("PCM N√£o Identificado", 44100)  # Assumir qualidade padr√£o
        
        return ("Formato Desconhecido (tentando processar)", 44100)  # Assumir qualidade padr√£o
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na detec√ß√£o de formato: {e}")
        return ("Erro na Detec√ß√£o", 44100)  # Fallback para qualidade padr√£o

def process_audio_for_device_compatibility(audio_segment, detected_format):
    """
    Processa √°udio de forma otimizada para diferentes dispositivos
    Preserva qualidade e corrige problemas de velocidade
    """
    try:
        original_frame_rate = audio_segment.frame_rate
        original_channels = audio_segment.channels
        original_duration = len(audio_segment)
        
        print(f"üéµ Processando √°udio: {original_frame_rate}Hz, {original_channels} canais, {original_duration}ms")
        
        # CORRE√á√ÉO ROBUSTA: Ajuste fino para sample rate correto (99.9% precis√£o)
        if original_frame_rate <= 22050:  # Sample rates baixos precisam corre√ß√£o
            # AJUSTE FINO: Calcular sample rate correto baseado na velocidade esperada
            # Se √°udio est√° em 16kHz mas deveria ser ~44.1kHz, calcular fator exato
            if original_frame_rate == 16000:
                # Fator de corre√ß√£o calibrado: 16kHz ‚Üí 44.1kHz com ajuste fino
                corrected_rate = 44100
                print(f"üîß AJUSTE FINO: {original_frame_rate}Hz ‚Üí {corrected_rate}Hz (corre√ß√£o calibrada)")
            elif original_frame_rate == 8000:
                # Para 8kHz, usar fator 5.5x para compensa√ß√£o exata
                corrected_rate = 44000  # Ligeiramente menos que 44.1kHz para ajuste fino
                print(f"üîß AJUSTE FINO: {original_frame_rate}Hz ‚Üí {corrected_rate}Hz (corre√ß√£o calibrada)")
            else:
                # Para outros sample rates baixos, usar propor√ß√£o otimizada
                corrected_rate = int(original_frame_rate * 2.75)  # Fator calibrado
                if corrected_rate > 48000:
                    corrected_rate = 44100
                print(f"üîß AJUSTE FINO: {original_frame_rate}Hz ‚Üí {corrected_rate}Hz (fator 2.75x calibrado)")
            
            # Aplicar corre√ß√£o com sample rate calibrado
            audio_segment = audio_segment._spawn(audio_segment.raw_data, overrides={"frame_rate": corrected_rate})
        else:
            print(f"‚úÖ Sample rate adequado mantido: {original_frame_rate}Hz")
        
        # Converter para mono se necess√°rio (padr√£o para transcri√ß√£o)
        if original_channels > 1:
            audio_segment = audio_segment.set_channels(1)
            print(f"üîß Convertido para mono (era {original_channels} canais)")
        else:
            print(f"‚úÖ Mantendo mono: {original_channels} canal")
        
        # Normalizar volume para melhor transcri√ß√£o
        audio_segment = audio_segment.normalize()
        print(f"üîß Volume normalizado")
        
        # Verificar se a dura√ß√£o foi preservada
        final_duration = len(audio_segment)
        duration_diff = abs(original_duration - final_duration)
        
        if duration_diff > 100:  # Mais de 100ms de diferen√ßa
            print(f"‚ö†Ô∏è ATEN√á√ÉO: Dura√ß√£o mudou em {duration_diff}ms!")
            print(f"   Original: {original_duration}ms, Final: {final_duration}ms")
        else:
            print(f"‚úÖ Dura√ß√£o preservada: {final_duration}ms")
        
        return audio_segment
        
    except Exception as e:
        print(f"‚ùå Erro no processamento de compatibilidade: {e}")
        raise

# ==================== FUN√á√ïES DE TRANSCRI√á√ÉO ====================

def transcribe_audio_with_speech_recognition(audio_path):
    """Transcreve √°udio usando Speech Recognition com abordagem robusta"""
    try:
        print(f"üîç Iniciando transcri√ß√£o de: {audio_path}")
        
        # Verificar se o arquivo existe
        if not os.path.exists(audio_path):
            return "[Erro: Arquivo de √°udio n√£o encontrado]"
        
        # Verificar tamanho do arquivo
        file_size = os.path.getsize(audio_path)
        print(f"üìä Tamanho do arquivo: {file_size} bytes")
        
        if file_size < 1000:  # Arquivo muito pequeno
            return "[Erro: Arquivo de √°udio muito pequeno ou vazio]"
        
        recognizer = sr.Recognizer()
        
        # Configura√ß√µes otimizadas
        recognizer.energy_threshold = 4000
        recognizer.dynamic_energy_threshold = False
        recognizer.pause_threshold = 0.8
        recognizer.operation_timeout = 30
        
        print("üìÅ Processando arquivo de √°udio...")
        
        # Processar √°udio com pydub
        try:
            print("üîß Carregando arquivo com pydub...")
            audio = AudioSegment.from_file(audio_path)
            
            # FUN√á√ÉO ROBUSTA: Processar √°udio para compatibilidade com diferentes dispositivos
            audio = process_audio_for_device_compatibility(audio, "Detectado durante transcri√ß√£o")
            
            print(f"üéµ √Åudio processado: {len(audio)}ms, {audio.frame_rate}Hz, {audio.channels} canal(is)")
            
            # TRANSCRI√á√ÉO INTELIGENTE: Segmentar √°udios longos para melhor precis√£o
            duration_seconds = len(audio) / 1000
            print(f"‚è±Ô∏è Dura√ß√£o: {duration_seconds:.1f}s")
            
            if duration_seconds > 30:  # Mais de 30 segundos
                print(f"üìã √Åudio longo detectado - usando transcri√ß√£o em segmentos")
                return transcribe_long_audio_in_segments(audio, audio_path)
            elif duration_seconds < 3:  # Muito curto
                print(f"‚ö†Ô∏è √Åudio muito curto ({duration_seconds:.1f}s) - pode ter problemas de transcri√ß√£o")
                # Prosseguir com transcri√ß√£o normal mas com configura√ß√µes especiais
            
            # CORRE√á√ÉO: Exportar para WAV tempor√°rio com configura√ß√µes espec√≠ficas para evitar problemas de velocidade
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
                print(f"üîß Exportando WAV tempor√°rio com configura√ß√µes otimizadas...")
                audio.export(temp_file.name, format="wav", parameters=[
                    "-acodec", "pcm_s16le",  # PCM 16-bit
                    "-ar", str(audio.frame_rate),  # Manter sample rate
                    "-ac", "1"  # Mono
                ])
                temp_path = temp_file.name
            
            try:
                # Transcrever com speech_recognition
                with sr.AudioFile(temp_path) as source:
                    print("üé§ Ajustando configura√ß√µes baseado na dura√ß√£o...")
                    
                    # Configura√ß√µes adaptativas baseadas na dura√ß√£o
                    if duration_seconds < 3:
                        # √Åudio curto: menos ajuste de ru√≠do, mais sensibilidade
                        recognizer.adjust_for_ambient_noise(source, duration=0.2)
                        recognizer.energy_threshold = 2000  # Mais sens√≠vel
                    elif duration_seconds < 10:
                        # √Åudio m√©dio: configura√ß√£o balanceada
                        recognizer.adjust_for_ambient_noise(source, duration=0.5)
                        recognizer.energy_threshold = 3000
                    else:
                        # √Åudio longo: mais ajuste de ru√≠do
                        recognizer.adjust_for_ambient_noise(source, duration=1.0)
                        recognizer.energy_threshold = 4000
                    
                    print("üéß Carregando √°udio...")
                    audio_data = recognizer.record(source)
                    
                    print("üîÑ Iniciando transcri√ß√£o...")
                    
                    # M√∫ltiplos engines Google (sistema est√°vel funcionando)
                    engines = [
                        ('google-pt-BR', lambda: recognizer.recognize_google(
                            audio_data, 
                            language='pt-BR'
                        )),
                        ('google-pt', lambda: recognizer.recognize_google(
                            audio_data, 
                            language='pt'  # Portugu√™s gen√©rico como backup
                        )),
                        ('google-with-details', lambda: recognizer.recognize_google(
                            audio_data, 
                            language='pt-BR', 
                            show_all=True  # Obter m√∫ltiplas alternativas
                        ))
                    ]
                    
                    best_transcription = None
                    best_confidence = 0
                    
                    for engine_name, recognize_func in engines:
                        try:
                            print(f"üîç Tentando com {engine_name}...")
                            result = recognize_func()
                            
                            # Processar resultado baseado no tipo
                            if engine_name == 'google-with-details' and isinstance(result, dict):
                                # Resultado com m√∫ltiplas alternativas do Google
                                if 'alternative' in result:
                                    alternatives = result['alternative']
                                    for alt in alternatives:
                                        if 'transcript' in alt:
                                            confidence = alt.get('confidence', 0.5)
                                            transcript = alt['transcript']
                                            print(f"üìä Google alternativa: '{transcript}' (confian√ßa: {confidence:.2f})")
                                            
                                            if confidence > best_confidence and transcript.strip():
                                                best_transcription = transcript
                                                best_confidence = confidence
                                                
                            elif isinstance(result, str) and result.strip():
                                # Resultado simples de string (Google normal)
                                print(f"‚úÖ {engine_name}: '{result[:50]}...' ({len(result)} chars)")
                                
                                # Dar prefer√™ncia para resultados mais longos se confian√ßa similar
                                estimated_confidence = 0.8 if 'google' in engine_name else 0.7
                                
                                if (estimated_confidence > best_confidence or 
                                    (abs(estimated_confidence - best_confidence) < 0.1 and 
                                     len(result) > len(best_transcription or ''))):
                                    best_transcription = result
                                    best_confidence = estimated_confidence
                                    
                        except sr.UnknownValueError:
                            print(f"‚ö†Ô∏è {engine_name}: N√£o foi poss√≠vel entender o √°udio")
                            continue
                        except sr.RequestError as e:
                            print(f"‚ùå {engine_name}: Erro na requisi√ß√£o: {e}")
                            continue
                        except Exception as e:
                            print(f"‚ùå {engine_name}: Erro inesperado: {e}")
                            continue
                    
                    # Retornar melhor resultado
                    if best_transcription and best_transcription.strip():
                        print(f"‚úÖ Melhor transcri√ß√£o encontrada (confian√ßa: {best_confidence:.2f})")
                        return best_transcription.strip()
                    
                    # Nenhuma transcri√ß√£o funcionou
                    print("‚ùå Nenhum engine conseguiu transcrever o √°udio")
                    return "[N√£o foi poss√≠vel transcrever o √°udio. Tente gravar com mais clareza ou em ambiente mais silencioso.]"
                    
            except Exception as e:
                print(f"‚ùå Erro durante transcri√ß√£o: {e}")
                return f"[Erro durante transcri√ß√£o: {str(e)}]"
            finally:
                # Limpar arquivo tempor√°rio
                try:
                    os.unlink(temp_path)
                except:
                    pass
                    
        except Exception as e:
            print(f"‚ùå Erro ao processar √°udio com pydub: {e}")
            return f"[Erro ao processar √°udio: {str(e)}]"
            
    except Exception as e:
        print(f"‚ùå Erro geral na transcri√ß√£o: {e}")
        return f"[Erro na transcri√ß√£o: {str(e)}]"

def transcribe_long_audio_in_segments(audio, original_path):
    """Transcreve √°udio longo dividindo em segmentos"""
    try:
        print("üìè √Åudio longo detectado, dividindo em segmentos...")
        
        segment_length = 240000  # 4 minutos em ms
        overlap = 5000  # 5 segundos de sobreposi√ß√£o
        
        segments = []
        start = 0
        
        while start < len(audio):
            end = min(start + segment_length, len(audio))
            segment = audio[start:end]
            segments.append(segment)
            start = end - overlap
            
            if start >= len(audio):
                break
        
        print(f"üìä Dividido em {len(segments)} segmentos")
        
        full_transcription = []
        recognizer = sr.Recognizer()
        
        for i, segment in enumerate(segments):
            print(f"üîÑ Processando segmento {i+1}/{len(segments)}...")
            
            try:
                # Exportar segmento para arquivo tempor√°rio
                with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
                    segment.export(temp_file.name, format="wav")
                    temp_path = temp_file.name
                
                try:
                    with sr.AudioFile(temp_path) as source:
                        recognizer.adjust_for_ambient_noise(source, duration=0.5)
                        audio_data = recognizer.record(source)
                        
                        try:
                            text = recognizer.recognize_google(audio_data, language='pt-BR')
                            if text and text.strip():
                                full_transcription.append(text)
                                print(f"‚úÖ Segmento {i+1} transcrito com sucesso")
                        except sr.UnknownValueError:
                            print(f"‚ö†Ô∏è Segmento {i+1}: N√£o foi poss√≠vel entender")
                            full_transcription.append("[Trecho inaud√≠vel]")
                        except sr.RequestError as e:
                            print(f"‚ùå Segmento {i+1}: Erro na requisi√ß√£o: {e}")
                            full_transcription.append("[Erro na transcri√ß√£o]")
                            
                finally:
                    try:
                        os.unlink(temp_path)
                    except:
                        pass
                        
            except Exception as e:
                print(f"‚ùå Erro no segmento {i+1}: {e}")
                full_transcription.append("[Erro no processamento]")
        
        result = " ".join(full_transcription)
        print(f"‚úÖ Transcri√ß√£o completa finalizada: {len(result)} caracteres")
        return result
        
    except Exception as e:
        print(f"‚ùå Erro na transcri√ß√£o segmentada: {e}")
        return f"[Erro na transcri√ß√£o segmentada: {str(e)}]"

def improve_transcription_with_gemini(raw_transcription):
    """Melhora a transcri√ß√£o usando Gemini AI"""
    if not model:
        return raw_transcription
    
    try:
        prompt = f"""
        Por favor, corrija e melhore a seguinte transcri√ß√£o de √°udio m√©dico:
        
        Transcri√ß√£o original:
        {raw_transcription}
        
        Instru√ß√µes:
        1. Corrija erros de ortografia e gram√°tica
        2. Adicione pontua√ß√£o adequada
        3. Organize o texto em par√°grafos quando apropriado
        4. Mantenha terminologia m√©dica precisa
        5. Preserve o significado original
        
        Retorne apenas o texto corrigido:
        """
        
        response = model.generate_content(prompt)
        return response.text
        
    except Exception as e:
        print(f"‚ùå Erro ao melhorar transcri√ß√£o com Gemini: {e}")
        return raw_transcription

# ==================== FUN√á√ïES DE GERA√á√ÉO DE DOCUMENTOS ====================

def create_pdf_from_text(text, title="Resumo da Consulta"):
    """Cria um PDF a partir de texto"""
    try:
        # Criar arquivo tempor√°rio
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
        temp_file.close()
        
        # Criar documento PDF
        doc = SimpleDocTemplate(temp_file.name, pagesize=letter)
        styles = getSampleStyleSheet()
        
        # Estilo personalizado
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=16,
            spaceAfter=30,
            alignment=1  # Centralizado
        )
        
        content_style = ParagraphStyle(
            'CustomContent',
            parent=styles['Normal'],
            fontSize=12,
            spaceAfter=12,
            alignment=0  # Justificado
        )
        
        # Construir conte√∫do
        story = []
        
        # Escapar caracteres especiais no t√≠tulo
        safe_title = title.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
        story.append(Paragraph(safe_title, title_style))
        story.append(Spacer(1, 12))
        
        # Dividir texto em par√°grafos e escapar caracteres especiais
        paragraphs = text.split('\n')
        for para in paragraphs:
            if para.strip():
                # Escapar caracteres especiais XML/HTML
                safe_para = para.strip().replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                # Remover caracteres de controle que podem causar problemas
                safe_para = ''.join(char for char in safe_para if ord(char) >= 32 or char in '\t\n\r')
                story.append(Paragraph(safe_para, content_style))
        
        # Gerar PDF
        doc.build(story)
        
        # Ler bytes do PDF
        with open(temp_file.name, 'rb') as f:
            pdf_bytes = f.read()
        
        # Limpar arquivo tempor√°rio
        os.unlink(temp_file.name)
        
        return pdf_bytes
        
    except Exception as e:
        print(f"‚ùå Erro ao criar PDF: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

def create_docx_from_text(text, title="Resumo da Consulta"):
    """Cria um documento DOCX a partir de texto"""
    try:
        # Criar documento
        doc = Document()
        
        # Adicionar t√≠tulo
        title_para = doc.add_heading(title, 0)
        title_para.alignment = 1  # Centralizado
        
        # Adicionar espa√ßo
        doc.add_paragraph()
        
        # Dividir texto em par√°grafos
        paragraphs = text.split('\n')
        for para in paragraphs:
            if para.strip():
                # Limpar caracteres de controle que podem causar problemas
                clean_para = ''.join(char for char in para.strip() if ord(char) >= 32 or char in '\t\n\r')
                if clean_para:  # S√≥ adicionar se ainda houver conte√∫do ap√≥s limpeza
                    doc.add_paragraph(clean_para)
        
        # Salvar em arquivo tempor√°rio
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.docx')
        temp_file.close()
        
        doc.save(temp_file.name)
        
        # Ler bytes do DOCX
        with open(temp_file.name, 'rb') as f:
            docx_bytes = f.read()
        
        # Limpar arquivo tempor√°rio
        os.unlink(temp_file.name)
        
        return docx_bytes
        
    except Exception as e:
        print(f"‚ùå Erro ao criar DOCX: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

# ==================== ROTAS DA API ====================

@audio_bp.route('/api/audio/upload', methods=['POST'])
@login_required
def api_audio_upload():
    """Rota compat√≠vel com frontend para upload de √°udio"""
    try:
        # Verificar se h√° arquivo de √°udio
        if 'audio' not in request.files:
            return jsonify({
                'success': False,
                'message': 'Nenhum arquivo de √°udio fornecido'
            }), 400
        
        audio_file = request.files['audio']
        original_name = request.form.get('originalName', '')
        
        if audio_file.filename == '':
            return jsonify({
                'success': False,
                'message': 'Nome do arquivo n√£o fornecido'
            }), 400
        
        # Ler dados do arquivo
        audio_bytes = audio_file.read()
        
        # Validar tamanho do arquivo
        if len(audio_bytes) < 1000:  # Menos de 1KB
            return jsonify({
                'success': False,
                'message': 'Arquivo de √°udio muito pequeno ou corrompido'
            }), 400
        
        # Gerar nome √∫nico do arquivo
        user_id = session.get('user_id', 'unknown')
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        unique_id = str(random.randint(100000, 999999))
        
        # Usar nome original se fornecido
        if original_name:
            filename = f"{original_name}_{timestamp}_{unique_id}_{user_id}.wav"
        else:
            filename = f"recording_{timestamp}_{unique_id}_{user_id}.wav"
        
        # Garantir que o diret√≥rio existe
        os.makedirs(RECORDINGS_DIR, exist_ok=True)
        file_path = os.path.join(RECORDINGS_DIR, filename)
        
        # Verificar se arquivo j√° existe (evitar duplica√ß√£o)
        if os.path.exists(file_path):
            counter = 1
            base_name, ext = os.path.splitext(filename)
            while os.path.exists(file_path):
                filename = f"{base_name}_({counter}){ext}"
                file_path = os.path.join(RECORDINGS_DIR, filename)
                counter += 1
        
        # Processar √°udio com pydub para garantir compatibilidade
        try:
            # FUN√á√ÉO ROBUSTA: Detectar formato do √°udio para diferentes dispositivos
            print(f"üîç Processando √°udio: {len(audio_bytes)} bytes")
            
            # FUN√á√ÉO ROBUSTA: Detectar formato do √°udio para diferentes dispositivos
            format_result = detect_audio_format_robust(audio_bytes)
            
            # Extrair formato e sample rate esperado
            if isinstance(format_result, tuple):
                detected_format, expected_sample_rate = format_result
            else:
                # Fallback para compatibilidade com vers√µes antigas
                detected_format = format_result
                expected_sample_rate = 44100
            
            print(f"üéØ Formato detectado: {detected_format}")
            print(f"üéµ Sample rate esperado: {expected_sample_rate}Hz")
            
            # Tentar carregar com pydub (suporta m√∫ltiplos formatos)
            try:
                audio_segment = AudioSegment.from_file(io.BytesIO(audio_bytes))
                print(f"‚úÖ √Åudio carregado com pydub: {audio_segment.frame_rate}Hz, {audio_segment.channels} canais")
                print(f"   Formato original: {detected_format}")
            except Exception as pydub_error:
                print(f"‚ö†Ô∏è Erro ao carregar com pydub: {pydub_error}")
                # Fallback: salvar arquivo original
                with open(file_path, 'wb') as f:
                    f.write(audio_bytes)
                file_size = len(audio_bytes)
                print(f"‚úÖ Arquivo salvo sem processamento: {filename} ({file_size} bytes)")
                return jsonify({
                    'message': '√Åudio salvo com sucesso (sem processamento)',
                    'audioFile': {
                        'filename': filename,
                        'originalName': original_name or filename,
                        'size': file_size,
                        'createdAt': datetime.now().isoformat()
                    }
                }), 201
            
            # FUN√á√ÉO ROBUSTA: Processar √°udio para compatibilidade com diferentes dispositivos
            audio_segment = process_audio_for_device_compatibility(audio_segment, detected_format)
            
            # CORRE√á√ÉO: Exportar como WAV com configura√ß√µes espec√≠ficas para evitar problemas de velocidade
            print(f"üîß Exportando WAV com configura√ß√µes otimizadas...")
            audio_segment.export(
                file_path, 
                format="wav",
                parameters=[
                    "-acodec", "pcm_s16le",  # PCM 16-bit
                    "-ar", str(audio_segment.frame_rate),  # Manter sample rate
                    "-ac", "1"  # Mono
                ]
            )
            
            file_size = os.path.getsize(file_path)
            print(f"‚úÖ Grava√ß√£o processada e salva: {filename} ({file_size} bytes)")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no processamento com pydub: {e}")
            # Fallback: salvar arquivo original
            try:
                with open(file_path, 'wb') as f:
                    f.write(audio_bytes)
                file_size = len(audio_bytes)
                print(f"‚úÖ Grava√ß√£o salva (fallback): {filename} ({file_size} bytes)")
            except Exception as fallback_error:
                print(f"‚ùå Erro no fallback: {fallback_error}")
                return jsonify({
                    'success': False,
                    'message': 'Erro ao salvar arquivo de √°udio'
                }), 500
        
                    # Resposta compat√≠vel com frontend
            return jsonify({
                'message': '√Åudio processado e salvo com sucesso',
                'audioFile': {
                    'filename': filename,
                    'originalName': original_name or filename,
                    'size': file_size,
                    'createdAt': datetime.now().isoformat(),
                    'originalFormat': detected_format,
                    'frameRate': audio_segment.frame_rate,
                    'channels': audio_segment.channels,
                    'duration': len(audio_segment),
                    'processingInfo': {
                        'deviceCompatible': True,
                        'qualityPreserved': True,
                        'speedCorrected': True
                    }
                }
            }), 201
        
    except Exception as e:
        print(f"‚ùå Erro geral ao fazer upload: {e}")
        return jsonify({
            'success': False,
            'message': f'Erro interno do servidor: {str(e)}'
        }), 500

@audio_bp.route('/api/audio/save-simple', methods=['POST'])
@login_required
def api_audio_save_simple():
    """
    NOVA ARQUITETURA: Salvamento simples e r√°pido (sem processamento pesado)
    Responsabilidade √önica: Apenas salvar arquivo original para processamento posterior
    """
    try:
        # Verificar se h√° arquivo de √°udio
        if 'audio' not in request.files:
            return jsonify({
                'success': False,
                'message': 'Nenhum arquivo de √°udio enviado'
            }), 400
        
        audio_file = request.files['audio']
        original_name = request.form.get('originalName', '')
        
        if audio_file.filename == '':
            return jsonify({
                'success': False,
                'message': 'Nome de arquivo inv√°lido'
            }), 400
        
        # Gerar nome √∫nico para o arquivo
        user_id = session.get('user_id', '')
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')[:-3]
        random_suffix = random.randint(100000, 999999)
        
        # SIMPLIFICADO: Manter extens√£o original (WebM/Opus)
        original_extension = audio_file.filename.split('.')[-1] if '.' in audio_file.filename else 'webm'
        filename = f"{original_name or 'recording'}_{timestamp}_{random_suffix}_{user_id}.{original_extension}"
        
        # Garantir que o diret√≥rio existe
        os.makedirs(RECORDINGS_DIR, exist_ok=True)
        file_path = os.path.join(RECORDINGS_DIR, filename)
        
        # SALVAMENTO SIMPLES: Apenas salvar arquivo original
        print(f"üíæ Salvamento simples: {filename}")
        audio_file.save(file_path)
        
        file_size = os.path.getsize(file_path)
        print(f"‚úÖ Arquivo salvo rapidamente: {filename} ({file_size} bytes)")
        
        # Resposta simples e r√°pida
        return jsonify({
            'success': True,
            'message': '√Åudio salvo com sucesso! Use "Processar e Transcrever" para otimizar.',
            'audioFile': {
                'filename': filename,
                'originalName': original_name or filename,
                'size': file_size,
                'createdAt': datetime.now().isoformat(),
                'status': 'raw',  # Arquivo n√£o processado
                'needsProcessing': True
            }
        }), 201
        
    except Exception as e:
        print(f"‚ùå Erro no salvamento simples: {e}")
        return jsonify({
            'success': False,
            'message': f'Erro ao salvar √°udio: {str(e)}'
        }), 500

@audio_bp.route('/api/audio/process', methods=['POST'])
@login_required
def api_audio_process():
    """
    NOVA ARQUITETURA: Processamento otimizado sob demanda
    Responsabilidade √önica: Otimizar √°udio e preparar para transcri√ß√£o
    """
    try:
        data = request.get_json()
        filename = data.get('filename')
        
        if not filename:
            return jsonify({
                'success': False,
                'message': 'Nome do arquivo n√£o fornecido'
            }), 400
        
        # Verificar se arquivo existe
        file_path = os.path.join(RECORDINGS_DIR, filename)
        if not os.path.exists(file_path):
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o encontrado'
            }), 404
        
        print(f"üîÑ Iniciando processamento otimizado: {filename}")
        
        # Carregar arquivo original
        with open(file_path, 'rb') as f:
            audio_bytes = f.read()
        
        # Detectar formato
        format_result = detect_audio_format_robust(audio_bytes)
        if isinstance(format_result, tuple):
            detected_format, expected_sample_rate = format_result
        else:
            detected_format = format_result
            expected_sample_rate = 44100
        
        print(f"üéØ Formato detectado: {detected_format}")
        print(f"üéµ Sample rate esperado: {expected_sample_rate}Hz")
        
        # Processar com pydub
        audio_segment = AudioSegment.from_file(io.BytesIO(audio_bytes))
        print(f"‚úÖ √Åudio carregado: {audio_segment.frame_rate}Hz, {audio_segment.channels} canais")
        
        # Aplicar otimiza√ß√µes
        optimized_audio = process_audio_for_device_compatibility(audio_segment, detected_format)
        
        # Gerar nome do arquivo otimizado
        base_name = filename.rsplit('.', 1)[0]
        optimized_filename = f"{base_name}_optimized.wav"
        optimized_path = os.path.join(RECORDINGS_DIR, optimized_filename)
        
        # Salvar vers√£o otimizada
        print(f"üíæ Salvando vers√£o otimizada: {optimized_filename}")
        optimized_audio.export(
            optimized_path,
            format="wav",
            parameters=[
                "-acodec", "pcm_s16le",  # PCM 16-bit
                "-ar", str(optimized_audio.frame_rate),  # Manter sample rate otimizado
                "-ac", "1"  # Mono
            ]
        )
        
        file_size = os.path.getsize(optimized_path)
        print(f"‚úÖ Arquivo otimizado salvo: {optimized_filename} ({file_size} bytes)")
        
        return jsonify({
            'success': True,
            'message': '√Åudio processado e otimizado com sucesso!',
            'originalFile': filename,
            'optimizedFile': optimized_filename,
            'processing': {
                'originalFormat': detected_format,
                'originalSampleRate': audio_segment.frame_rate,
                'optimizedSampleRate': optimized_audio.frame_rate,
                'optimizedSize': file_size,
                'qualityImproved': optimized_audio.frame_rate > audio_segment.frame_rate
            }
        }), 200
        
    except Exception as e:
        print(f"‚ùå Erro no processamento: {e}")
        return jsonify({
            'success': False,
            'message': f'Erro ao processar √°udio: {str(e)}'
        }), 500

@audio_bp.route('/api/audio/transcribe', methods=['POST'])
@login_required
def api_audio_transcribe():
    """
    NOVA ARQUITETURA: Transcri√ß√£o otimizada de arquivo processado
    Responsabilidade √önica: Transcrever √°udio j√° otimizado
    """
    try:
        data = request.get_json()
        optimized_filename = data.get('optimizedFile')
        
        if not optimized_filename:
            return jsonify({
                'success': False,
                'message': 'Nome do arquivo otimizado n√£o fornecido'
            }), 400
        
        # Verificar se arquivo otimizado existe
        optimized_path = os.path.join(RECORDINGS_DIR, optimized_filename)
        if not os.path.exists(optimized_path):
            return jsonify({
                'success': False,
                'message': 'Arquivo otimizado n√£o encontrado'
            }), 404
        
        print(f"üéØ Iniciando transcri√ß√£o otimizada: {optimized_filename}")
        
        # Transcrever arquivo otimizado
        transcription = transcribe_audio_with_speech_recognition(optimized_path)
        
        if not transcription or transcription.startswith('[Erro') or transcription.startswith('[N√£o foi poss√≠vel'):
            return jsonify({
                'success': False,
                'message': 'Falha na transcri√ß√£o',
                'transcription': transcription
            }), 422
        
        # Salvar transcri√ß√£o
        base_name = optimized_filename.rsplit('.', 1)[0]
        transcription_filename = f"{base_name}_transcricao.txt"
        transcription_path = os.path.join('transcriptions', transcription_filename)
        
        # Garantir que o diret√≥rio existe
        os.makedirs('transcriptions', exist_ok=True)
        
        # Salvar arquivo de transcri√ß√£o
        with open(transcription_path, 'w', encoding='utf-8') as f:
            f.write(transcription)
        
        print(f"‚úÖ Transcri√ß√£o salva: {transcription_filename}")
        
        return jsonify({
            'success': True,
            'message': 'Transcri√ß√£o conclu√≠da com sucesso!',
            'transcription': transcription,
            'transcriptionFile': transcription_filename,
            'optimizedFile': optimized_filename,
            'processing': {
                'transcriptionLength': len(transcription),
                'wordCount': len(transcription.split()) if transcription else 0,
                'qualityOptimized': True
            }
        }), 200
        
    except Exception as e:
        print(f"‚ùå Erro na transcri√ß√£o: {e}")
        return jsonify({
            'success': False,
            'message': f'Erro ao transcrever √°udio: {str(e)}'
        }), 500

@audio_bp.route('/api/audio/test-fix', methods=['POST'])
@login_required
def api_audio_test_fix():
    """
    ENDPOINT DE TESTE: Testar corre√ß√£o de sample rate para resolver √°udio lento
    """
    try:
        data = request.get_json()
        filename = data.get('filename')
        
        if not filename:
            return jsonify({
                'success': False,
                'message': 'Nome do arquivo n√£o fornecido'
            }), 400
        
        file_path = os.path.join(RECORDINGS_DIR, filename)
        if not os.path.exists(file_path):
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o encontrado'
            }), 404
        
        print(f"üß™ TESTE DE CORRE√á√ÉO: {filename}")
        
        # Carregar arquivo
        with open(file_path, 'rb') as f:
            audio_bytes = f.read()
        
        # An√°lise inicial
        audio_segment = AudioSegment.from_file(io.BytesIO(audio_bytes))
        original_rate = audio_segment.frame_rate
        original_duration = len(audio_segment)
        
        print(f"üìä ANTES: {original_rate}Hz, {original_duration}ms")
        
        # Aplicar corre√ß√£o robusta
        if original_rate <= 22050:
            # For√ßar sample rate correto SEM reamostrar
            corrected_audio = audio_segment._spawn(audio_segment.raw_data, overrides={"frame_rate": 44100})
            print(f"üîß FOR√áADO: {original_rate}Hz ‚Üí 44.1kHz (mesmos dados, interpreta√ß√£o correta)")
        else:
            corrected_audio = audio_segment
            print(f"‚úÖ MANTIDO: {original_rate}Hz")
        
        # Verificar resultado
        final_rate = corrected_audio.frame_rate
        final_duration = len(corrected_audio)
        
        print(f"üìä DEPOIS: {final_rate}Hz, {final_duration}ms")
        
        # Salvar arquivo teste
        test_filename = f"TEST_FIXED_{filename}"
        test_path = os.path.join(RECORDINGS_DIR, test_filename)
        
        corrected_audio.export(
            test_path,
            format="wav",
            parameters=[
                "-acodec", "pcm_s16le",
                "-ar", str(final_rate),
                "-ac", "1"
            ]
        )
        
        # Verificar arquivo salvo
        with wave.open(test_path, 'rb') as wav_file:
            saved_rate = wav_file.getframerate()
            saved_duration = wav_file.getnframes() / saved_rate * 1000
        
        print(f"üíæ ARQUIVO SALVO: {saved_rate}Hz, {saved_duration:.0f}ms")
        
        return jsonify({
            'success': True,
            'message': 'Teste de corre√ß√£o conclu√≠do',
            'original': {
                'filename': filename,
                'sampleRate': original_rate,
                'duration': original_duration
            },
            'corrected': {
                'filename': test_filename,
                'sampleRate': final_rate,
                'duration': final_duration
            },
            'saved': {
                'sampleRate': saved_rate,
                'duration': saved_duration
            },
            'speedFixed': original_rate != final_rate
        }), 200
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return jsonify({
            'success': False,
            'message': f'Erro no teste: {str(e)}'
        }), 500

@audio_bp.route('/api/audio/calibrate', methods=['POST'])
@login_required
def api_audio_calibrate():
    """
    CALIBRA√á√ÉO FINA: Ajustar sample rate para velocidade perfeita
    """
    try:
        data = request.get_json()
        filename = data.get('filename')
        speed_feedback = data.get('speedFeedback', 'normal')  # 'slow', 'fast', 'normal'
        
        if not filename:
            return jsonify({
                'success': False,
                'message': 'Nome do arquivo n√£o fornecido'
            }), 400
        
        file_path = os.path.join(RECORDINGS_DIR, filename)
        if not os.path.exists(file_path):
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o encontrado'
            }), 404
        
        print(f"üéõÔ∏è CALIBRA√á√ÉO FINA: {filename} - Feedback: {speed_feedback}")
        
        # Carregar arquivo
        with open(file_path, 'rb') as f:
            audio_bytes = f.read()
        
        audio_segment = AudioSegment.from_file(io.BytesIO(audio_bytes))
        original_rate = audio_segment.frame_rate
        
        # Calcular fator de corre√ß√£o baseado no feedback
        if speed_feedback == 'slow':
            # Ainda est√° lento, aumentar sample rate um pouco mais
            if original_rate == 44100:
                calibrated_rate = 45000  # +2% mais r√°pido
            else:
                calibrated_rate = int(original_rate * 1.02)  # +2%
            print(f"üîß CORRE√á√ÉO LENTO: {original_rate}Hz ‚Üí {calibrated_rate}Hz (+2%)")
            
        elif speed_feedback == 'fast':
            # Est√° r√°pido demais, diminuir sample rate um pouco
            if original_rate == 44100:
                calibrated_rate = 43200  # -2% mais lento
            else:
                calibrated_rate = int(original_rate * 0.98)  # -2%
            print(f"üîß CORRE√á√ÉO R√ÅPIDO: {original_rate}Hz ‚Üí {calibrated_rate}Hz (-2%)")
            
        else:  # normal
            calibrated_rate = original_rate
            print(f"‚úÖ VELOCIDADE PERFEITA: {original_rate}Hz mantido")
        
        if calibrated_rate != original_rate:
            # Aplicar calibra√ß√£o
            calibrated_audio = audio_segment._spawn(audio_segment.raw_data, overrides={"frame_rate": calibrated_rate})
            
            # Salvar arquivo calibrado
            calibrated_filename = f"CALIBRATED_{filename}"
            calibrated_path = os.path.join(RECORDINGS_DIR, calibrated_filename)
            
            calibrated_audio.export(
                calibrated_path,
                format="wav",
                parameters=[
                    "-acodec", "pcm_s16le",
                    "-ar", str(calibrated_rate),
                    "-ac", "1"
                ]
            )
            
            return jsonify({
                'success': True,
                'message': f'√Åudio calibrado para velocidade {speed_feedback}',
                'original': {
                    'filename': filename,
                    'sampleRate': original_rate
                },
                'calibrated': {
                    'filename': calibrated_filename,
                    'sampleRate': calibrated_rate,
                    'adjustment': f"{'+' if calibrated_rate > original_rate else ''}{((calibrated_rate - original_rate) / original_rate * 100):.1f}%"
                }
            }), 200
        else:
            return jsonify({
                'success': True,
                'message': '√Åudio j√° est√° na velocidade perfeita',
                'noAdjustmentNeeded': True
            }), 200
        
    except Exception as e:
        print(f"‚ùå Erro na calibra√ß√£o: {e}")
        return jsonify({
            'success': False,
            'message': f'Erro na calibra√ß√£o: {str(e)}'
        }), 500

@audio_bp.route('/api/audio/files', methods=['GET'])
@login_required
def api_audio_files():
    """Lista arquivos de √°udio do usu√°rio (compat√≠vel com frontend)"""
    try:
        user_id = session.get('user_id', '')
        user_email = session.get('user_email', '')
        recordings = []
        
        print(f"üîç Buscando arquivos para user_id: {user_id}, email: {user_email}")
        
        # Verificar se o diret√≥rio existe
        if not os.path.exists(RECORDINGS_DIR):
            os.makedirs(RECORDINGS_DIR, exist_ok=True)
            return jsonify({'audioFiles': []})
        
        # Listar arquivos
        all_files = os.listdir(RECORDINGS_DIR)
        print(f"üìã Arquivos encontrados: {len(all_files)}")
        
        for filename in all_files:
            if not filename.endswith('.wav'):
                continue
            
            # Verificar se pertence ao usu√°rio
            belongs_to_user = False
            
            # Formato novo: nome_timestamp_userid.wav
            if filename.endswith(f"_{user_id}.wav"):
                belongs_to_user = True
            # Formato antigo com email
            elif user_email:
                old_format_suffix = f"_{user_email.replace('@', '_').replace('.', '_')}.wav"
                if filename.endswith(old_format_suffix):
                    belongs_to_user = True
            
            if not belongs_to_user:
                continue
            
            file_path = os.path.join(RECORDINGS_DIR, filename)
            try:
                stats = os.stat(file_path)
                file_size = stats.st_size
                created_time = datetime.fromtimestamp(stats.st_ctime)
                
                recordings.append({
                    'id': filename,  # Usar filename como ID
                    'filename': filename,
                    'originalName': filename.replace(f'_{user_id}.wav', '').replace('.wav', ''),
                    'size': file_size,
                    'createdAt': created_time.isoformat()
                })
            except Exception as e:
                print(f"‚ùå Erro ao processar arquivo {filename}: {e}")
                continue
        
        # Ordenar por data de cria√ß√£o (mais recentes primeiro)
        recordings.sort(key=lambda x: x['createdAt'], reverse=True)
        
        return jsonify({'audioFiles': recordings})
        
    except Exception as e:
        print(f"‚ùå Erro ao listar arquivos: {e}")
        return jsonify({
            'success': False,
            'message': f'Erro interno do servidor: {str(e)}'
        }), 500

@audio_bp.route('/api/save_recording', methods=['POST'])
@login_required
def api_save_recording():
    """Salva grava√ß√£o com processamento otimizado para deploy"""
    try:
        data = request.json
        audio_data = data.get('audio')
        patient_name = data.get('patient_name', '')
        
        if not audio_data:
            return jsonify({
                'success': False,
                'message': 'Dados de √°udio n√£o fornecidos'
            }), 400
        
        # Decodificar base64
        if audio_data.startswith('data:audio'):
            # Extrair tipo MIME e dados
            header, audio_data = audio_data.split(',', 1)
            mime_type = header.split(':')[1].split(';')[0]
        else:
            mime_type = 'audio/wav'  # fallback
        
        try:
            audio_bytes = base64.b64decode(audio_data)
        except Exception as e:
            print(f"‚ùå Erro ao decodificar base64: {e}")
            return jsonify({
                'success': False,
                'message': 'Erro ao decodificar dados de √°udio'
            }), 400
        
        # Validar tamanho do arquivo
        if len(audio_bytes) < 1000:  # Menos de 1KB
            return jsonify({
                'success': False,
                'message': 'Arquivo de √°udio muito pequeno ou corrompido'
            }), 400
        
        # Gerar nome √∫nico do arquivo
        user_id = session.get('user_id', 'unknown')
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        unique_id = str(int(time.time() * 1000))[-6:]  # 6 √∫ltimos d√≠gitos do timestamp
        
        if patient_name:
            safe_patient_name = sanitize_filename(patient_name)
            filename = f"{safe_patient_name}_{timestamp}_{unique_id}_{user_id}.wav"
        else:
            filename = f"recording_{timestamp}_{unique_id}_{user_id}.wav"
        
        # Garantir que o diret√≥rio existe
        os.makedirs(RECORDINGS_DIR, exist_ok=True)
        file_path = os.path.join(RECORDINGS_DIR, filename)
        
        # Verificar se arquivo j√° existe (evitar duplica√ß√£o)
        if os.path.exists(file_path):
            counter = 1
            base_name, ext = os.path.splitext(filename)
            while os.path.exists(file_path):
                filename = f"{base_name}_({counter}){ext}"
                file_path = os.path.join(RECORDINGS_DIR, filename)
                counter += 1
        
        # Processar √°udio com pydub para garantir compatibilidade
        try:
            # Carregar √°udio original
            audio_segment = AudioSegment.from_file(io.BytesIO(audio_bytes))
            
            # FUN√á√ÉO ROBUSTA: Processar √°udio para compatibilidade com diferentes dispositivos
            audio_segment = process_audio_for_device_compatibility(audio_segment, "Grava√ß√£o via API")
            
            # Exportar como WAV mantendo qualidade
            audio_segment.export(
                file_path, 
                format="wav",
                parameters=["-acodec", "pcm_s16le"]  # PCM 16-bit
            )
            
            file_size = os.path.getsize(file_path)
            print(f"‚úÖ Grava√ß√£o processada e salva: {filename} ({file_size} bytes)")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no processamento com pydub: {e}")
            # Fallback: salvar arquivo original
            try:
                with open(file_path, 'wb') as f:
                    f.write(audio_bytes)
                file_size = len(audio_bytes)
                print(f"‚úÖ Grava√ß√£o salva (fallback): {filename} ({file_size} bytes)")
            except Exception as fallback_error:
                print(f"‚ùå Erro no fallback: {fallback_error}")
                return jsonify({
                    'success': False,
                    'message': 'Erro ao salvar arquivo de √°udio'
                }), 500
        
        return jsonify({
            'success': True,
            'message': 'Grava√ß√£o salva com sucesso!',
            'filename': filename,
            'size': file_size
        })
        
    except Exception as e:
        print(f"‚ùå Erro geral ao salvar grava√ß√£o: {e}")
        return jsonify({
            'success': False,
            'message': f'Erro interno do servidor: {str(e)}'
        }), 500

@audio_bp.route('/api/recordings', methods=['GET'])
@login_required
def api_get_recordings():
    """Lista grava√ß√µes do usu√°rio com l√≥gica corrigida"""
    try:
        user_id = session['user_id']
        user_email = session.get('user_email', '')
        recordings = []
        sessions = {}
        
        print(f"üîç Buscando grava√ß√µes para user_id: {user_id}, email: {user_email}")
        
        # Verificar se o diret√≥rio existe
        if not os.path.exists(RECORDINGS_DIR):
            print(f"‚ùå Diret√≥rio {RECORDINGS_DIR} n√£o existe")
            # Criar diret√≥rio se n√£o existir
            os.makedirs(RECORDINGS_DIR, exist_ok=True)
            return jsonify({
                'success': True,
                'recordings': [],
                'sessions': []
            })
        
        # Listar arquivos
        all_files = os.listdir(RECORDINGS_DIR)
        print(f"üìã Arquivos encontrados: {len(all_files)}")
        
        for filename in all_files:
            if not filename.endswith('.wav'):
                continue
            
            print(f"üîç Analisando arquivo: {filename}")
            
            # CORRE√á√ÉO: L√≥gica de filtragem mais rigorosa e com debug
            belongs_to_user = False
            
            # Verificar formato novo: nome_timestamp_userid.wav
            if filename.endswith(f"_{user_id}.wav"):
                belongs_to_user = True
                print(f"‚úÖ Arquivo pertence ao usu√°rio (formato novo): {filename}")
            
            # Verificar formato antigo apenas se user_email existir
            elif user_email:
                # Formato antigo: nome_timestamp_email_formatado.wav
                old_format_suffix = f"_{user_email.replace('@', '_').replace('.', '_')}.wav"
                if filename.endswith(old_format_suffix):
                    belongs_to_user = True
                    print(f"‚úÖ Arquivo pertence ao usu√°rio (formato antigo): {filename}")
            
            if not belongs_to_user:
                print(f"‚ùå Arquivo N√ÉO pertence ao usu√°rio: {filename}")
                continue
            
            filepath = os.path.join(RECORDINGS_DIR, filename)
            
            try:
                # Verificar se o arquivo existe e √© acess√≠vel
                if not os.path.exists(filepath):
                    print(f"‚ùå Arquivo n√£o existe: {filepath}")
                    continue
                    
                file_size = os.path.getsize(filepath)
                
                # Data de modifica√ß√£o
                modified_time = os.path.getmtime(filepath)
                modified_date = datetime.fromtimestamp(modified_time).strftime('%d/%m/%Y %H:%M')
                
                # Verificar transcri√ß√£o
                transcription_file = os.path.splitext(filename)[0] + '_transcricao.txt'
                transcription_path = os.path.join(TRANSCRIPTIONS_DIR, transcription_file)
                has_transcription = os.path.exists(transcription_path)
                
                # Formatar tamanho de forma leg√≠vel
                if file_size < 1024:
                    size_str = f"{file_size} B"
                elif file_size < 1024 * 1024:
                    size_str = f"{file_size / 1024:.1f} KB"
                else:
                    size_str = f"{file_size / (1024 * 1024):.1f} MB"
                
                if '_sessao_' in filename:
                    # Segmento de sess√£o
                    parts = filename.split('_')
                    if len(parts) >= 3:
                        session_id = parts[2]
                        
                        if session_id not in sessions:
                            sessions[session_id] = {
                                'id': session_id,
                                'segments': [],
                                'total_size': 0
                            }
                        
                        sessions[session_id]['segments'].append({
                            'filename': filename,
                            'size': file_size,
                            'has_transcription': has_transcription
                        })
                        sessions[session_id]['total_size'] += file_size
                else:
                    # Grava√ß√£o individual
                    recording_data = {
                        'filename': filename,
                        'size': size_str,  # CORRE√á√ÉO: Formato leg√≠vel
                        'date': modified_date,  # CORRE√á√ÉO: Campo correto para o frontend
                        'has_transcription': has_transcription
                    }
                    recordings.append(recording_data)
                    print(f"‚úÖ Grava√ß√£o adicionada: {recording_data}")
                    
            except Exception as file_error:
                print(f"‚ùå Erro ao processar arquivo {filename}: {file_error}")
                continue
        
        # Ordenar por data (mais recente primeiro)
        try:
            recordings.sort(key=lambda x: datetime.strptime(x['date'], '%d/%m/%Y %H:%M'), reverse=True)
        except Exception as sort_error:
            print(f"‚ö†Ô∏è Erro ao ordenar grava√ß√µes: {sort_error}")
            # Manter ordem original se houver erro na ordena√ß√£o
        
        # Converter sess√µes para lista
        session_list = list(sessions.values())
        
        print(f"üìä RESULTADO FINAL: {len(recordings)} grava√ß√µes e {len(session_list)} sess√µes")
        print(f"üìã Grava√ß√µes encontradas: {[r['filename'] for r in recordings]}")
        
        return jsonify({
            'success': True,
            'recordings': recordings,
            'sessions': session_list
        })
        
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO ao listar grava√ß√µes: {str(e)}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        
        # CORRE√á√ÉO: Retornar lista vazia em caso de erro, n√£o falhar
        return jsonify({
            'success': True,  # Manter como True para n√£o quebrar o frontend
            'recordings': [],
            'sessions': [],
            'error_message': f'Erro interno: {str(e)}'
        })

@audio_bp.route('/transcribe', methods=['POST'])
@login_required
def transcribe_recording():
    """Transcreve uma grava√ß√£o"""
    try:
        data = request.json
        filename = data.get('filename')
        
        if not filename:
            return jsonify({
                'success': False,
                'message': 'Nome do arquivo n√£o fornecido'
            }), 400
        
        # Verificar se o arquivo pertence ao usu√°rio
        user_id = session['user_id']
        user_email = session.get('user_email', '')
        
        # Verificar formato novo ou antigo
        belongs_to_user = (
            filename.endswith(f"_{user_id}.wav") or 
            (user_email and filename.endswith(f"_{user_email.replace('@', '_').replace('.', '_')}.wav"))
        )
        
        if not belongs_to_user:
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o pertence ao usu√°rio'
            }), 403
        
        filepath = os.path.join(RECORDINGS_DIR, filename)
        
        if not os.path.exists(filepath):
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o encontrado'
            }), 404
        
        print(f"üéØ Iniciando transcri√ß√£o de: {filename}")
        
        # Transcrever
        transcription = transcribe_audio_with_speech_recognition(filepath)
        
        # Melhorar com Gemini se dispon√≠vel
        if model and not transcription.startswith('['):
            print("ü§ñ Melhorando transcri√ß√£o com Gemini...")
            transcription = improve_transcription_with_gemini(transcription)
        
        # Salvar transcri√ß√£o
        transcription_filename = os.path.splitext(filename)[0] + '_transcricao.txt'
        transcription_path = os.path.join(TRANSCRIPTIONS_DIR, transcription_filename)
        
        # Criar diret√≥rio se n√£o existir
        os.makedirs(TRANSCRIPTIONS_DIR, exist_ok=True)
        
        with open(transcription_path, 'w', encoding='utf-8') as f:
            f.write(transcription)
        
        print(f"‚úÖ Transcri√ß√£o salva: {transcription_filename}")
        
        return jsonify({
            'success': True,
            'transcription': transcription,
            'message': 'Transcri√ß√£o realizada com sucesso!'
        })
        
    except Exception as e:
        print(f"‚ùå Erro na transcri√ß√£o: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Erro na transcri√ß√£o: {str(e)}'
        }), 500

@audio_bp.route('/api/rename_recording', methods=['POST'])
@login_required
def rename_recording():
    """Renomeia uma grava√ß√£o"""
    try:
        data = request.json
        old_filename = data.get('old_filename')
        new_name = data.get('new_name', '').strip()
        
        if not old_filename or not new_name:
            return jsonify({
                'success': False,
                'message': 'Nome antigo e novo s√£o obrigat√≥rios'
            }), 400
        
        # Verificar se o arquivo pertence ao usu√°rio
        user_id = session['user_id']
        user_email = session.get('user_email', '')
        
        belongs_to_user = (
            old_filename.endswith(f"_{user_id}.wav") or 
            (user_email and old_filename.endswith(f"_{user_email.replace('@', '_').replace('.', '_')}.wav"))
        )
        
        if not belongs_to_user:
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o pertence ao usu√°rio'
            }), 403
        
        old_filepath = os.path.join(RECORDINGS_DIR, old_filename)
        
        if not os.path.exists(old_filepath):
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o encontrado'
            }), 404
        
        # Gerar novo nome
        safe_new_name = sanitize_filename(new_name)
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        new_filename = f'{safe_new_name}_{timestamp}_{user_id}.wav'
        new_filepath = os.path.join(RECORDINGS_DIR, new_filename)
        
        # Renomear arquivo
        os.rename(old_filepath, new_filepath)
        
        # Renomear transcri√ß√£o se existir
        old_transcription = os.path.splitext(old_filename)[0] + '_transcricao.txt'
        old_transcription_path = os.path.join(TRANSCRIPTIONS_DIR, old_transcription)
        
        if os.path.exists(old_transcription_path):
            new_transcription = os.path.splitext(new_filename)[0] + '_transcricao.txt'
            new_transcription_path = os.path.join(TRANSCRIPTIONS_DIR, new_transcription)
            os.rename(old_transcription_path, new_transcription_path)
        
        print(f"‚úÖ Arquivo renomeado: {old_filename} -> {new_filename}")
        
        return jsonify({
            'success': True,
            'new_filename': new_filename,
            'message': 'Arquivo renomeado com sucesso!'
        })
        
    except Exception as e:
        print(f"‚ùå Erro ao renomear: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Erro ao renomear: {str(e)}'
        }), 500

@audio_bp.route('/api/delete_recording', methods=['POST'])
@login_required
def delete_recording():
    """Exclui uma grava√ß√£o"""
    try:
        data = request.json
        filename = data.get('filename')
        
        if not filename:
            return jsonify({
                'success': False,
                'message': 'Nome do arquivo n√£o fornecido'
            }), 400
        
        # Verificar se o arquivo pertence ao usu√°rio
        user_id = session['user_id']
        user_email = session.get('user_email', '')
        
        belongs_to_user = (
            filename.endswith(f"_{user_id}.wav") or 
            (user_email and filename.endswith(f"_{user_email.replace('@', '_').replace('.', '_')}.wav"))
        )
        
        if not belongs_to_user:
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o pertence ao usu√°rio'
            }), 403
        
        filepath = os.path.join(RECORDINGS_DIR, filename)
        
        if not os.path.exists(filepath):
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o encontrado'
            }), 404
        
        # Excluir arquivo
        os.remove(filepath)
        
        # Excluir transcri√ß√£o se existir
        transcription_file = os.path.splitext(filename)[0] + '_transcricao.txt'
        transcription_path = os.path.join(TRANSCRIPTIONS_DIR, transcription_file)
        
        if os.path.exists(transcription_path):
            os.remove(transcription_path)
        
        print(f"‚úÖ Arquivo exclu√≠do: {filename}")
        
        return jsonify({
            'success': True,
            'message': 'Arquivo exclu√≠do com sucesso!'
        })
        
    except Exception as e:
        print(f"‚ùå Erro ao excluir: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Erro ao excluir: {str(e)}'
        }), 500

@audio_bp.route('/download/<filename>')
@login_required
def download_recording(filename):
    """Download de grava√ß√£o"""
    try:
        # Verificar se o arquivo pertence ao usu√°rio
        user_id = session['user_id']
        user_email = session.get('user_email', '')
        
        belongs_to_user = (
            filename.endswith(f"_{user_id}.wav") or 
            (user_email and filename.endswith(f"_{user_email.replace('@', '_').replace('.', '_')}.wav"))
        )
        
        if not belongs_to_user:
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o pertence ao usu√°rio'
            }), 403
        
        filepath = os.path.join(RECORDINGS_DIR, filename)
        
        if not os.path.exists(filepath):
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o encontrado'
            }), 404
        
        return send_file(filepath, as_attachment=True, download_name=filename)
        
    except Exception as e:
        print(f"‚ùå Erro no download: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Erro no download: {str(e)}'
        }), 500

@audio_bp.route('/download_transcription/<filename>')
@login_required
def download_transcription(filename):
    """Download de transcri√ß√£o"""
    try:
        # Verificar se o arquivo pertence ao usu√°rio
        user_id = session['user_id']
        user_email = session.get('user_email', '')
        
        recording_filename = filename.replace('_transcricao.txt', '.wav')
        belongs_to_user = (
            recording_filename.endswith(f"_{user_id}.wav") or 
            (user_email and recording_filename.endswith(f"_{user_email.replace('@', '_').replace('.', '_')}.wav"))
        )
        
        if not belongs_to_user:
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o pertence ao usu√°rio'
            }), 403
        
        filepath = os.path.join(TRANSCRIPTIONS_DIR, filename)
        
        if not os.path.exists(filepath):
            return jsonify({
                'success': False,
                'message': 'Transcri√ß√£o n√£o encontrada'
            }), 404
        
        return send_file(filepath, as_attachment=True, download_name=filename)
        
    except Exception as e:
        print(f"‚ùå Erro no download da transcri√ß√£o: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Erro no download: {str(e)}'
        }), 500

@audio_bp.route('/export_pdf/<filename>')
@login_required
def export_pdf(filename):
    """Exporta transcri√ß√£o como PDF"""
    try:
        # Verificar se o arquivo pertence ao usu√°rio
        user_id = session['user_id']
        user_email = session.get('user_email', '')
        
        recording_filename = filename.replace('_transcricao.txt', '.wav')
        belongs_to_user = (
            recording_filename.endswith(f"_{user_id}.wav") or 
            (user_email and recording_filename.endswith(f"_{user_email.replace('@', '_').replace('.', '_')}.wav"))
        )
        
        if not belongs_to_user:
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o pertence ao usu√°rio'
            }), 403
        
        transcription_path = os.path.join(TRANSCRIPTIONS_DIR, filename)
        
        if not os.path.exists(transcription_path):
            return jsonify({
                'success': False,
                'message': 'Transcri√ß√£o n√£o encontrada'
            }), 404
        
        # Ler transcri√ß√£o
        with open(transcription_path, 'r', encoding='utf-8') as f:
            text = f.read()
        
        # Criar PDF
        pdf_bytes = create_pdf_from_text(text)
        
        if not pdf_bytes:
            return jsonify({
                'success': False,
                'message': 'Erro ao gerar PDF'
            }), 500
        
        # Criar arquivo tempor√°rio para download
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
        temp_file.write(pdf_bytes)
        temp_file.close()
        
        pdf_filename = filename.replace('_transcricao.txt', '_transcricao.pdf')
        
        return send_file(temp_file.name, as_attachment=True, download_name=pdf_filename)
        
    except Exception as e:
        print(f"‚ùå Erro ao exportar PDF: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Erro ao exportar PDF: {str(e)}'
        }), 500

@audio_bp.route('/export_docx/<filename>')
@login_required
def export_docx(filename):
    """Exporta transcri√ß√£o como DOCX"""
    try:
        # Verificar se o arquivo pertence ao usu√°rio
        user_id = session['user_id']
        user_email = session.get('user_email', '')
        
        recording_filename = filename.replace('_transcricao.txt', '.wav')
        belongs_to_user = (
            recording_filename.endswith(f"_{user_id}.wav") or 
            (user_email and recording_filename.endswith(f"_{user_email.replace('@', '_').replace('.', '_')}.wav"))
        )
        
        if not belongs_to_user:
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o pertence ao usu√°rio'
            }), 403
        
        transcription_path = os.path.join(TRANSCRIPTIONS_DIR, filename)
        
        if not os.path.exists(transcription_path):
            return jsonify({
                'success': False,
                'message': 'Transcri√ß√£o n√£o encontrada'
            }), 404
        
        # Ler transcri√ß√£o
        with open(transcription_path, 'r', encoding='utf-8') as f:
            text = f.read()
        
        # Criar DOCX
        docx_bytes = create_docx_from_text(text)
        
        if not docx_bytes:
            return jsonify({
                'success': False,
                'message': 'Erro ao gerar DOCX'
            }), 500
        
        # Criar arquivo tempor√°rio para download
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.docx')
        temp_file.write(docx_bytes)
        temp_file.close()
        
        docx_filename = filename.replace('_transcricao.txt', '_transcricao.docx')
        
        return send_file(temp_file.name, as_attachment=True, download_name=docx_filename)
        
    except Exception as e:
        print(f"‚ùå Erro ao exportar DOCX: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Erro ao exportar DOCX: {str(e)}'
        }), 500

@audio_bp.route('/api/transcriptions', methods=['GET'])
@login_required
def api_get_transcriptions():
    """Rota API para listar transcri√ß√µes - compatibilidade com React"""
    try:
        user_id = session['user_id']
        user_email = session.get('user_email', '')
        safe_user_email = user_email.replace('@', '_').replace('.', '_')
        transcriptions = []
        
        print(f"üîç Buscando transcri√ß√µes para user_id: {user_id}")
        print(f"üìß Email do usu√°rio: {user_email}")
        print(f"üìÅ Diret√≥rio de transcri√ß√µes: {os.path.abspath(TRANSCRIPTIONS_DIR)}")
        
        # Verificar se o diret√≥rio existe
        if not os.path.exists(TRANSCRIPTIONS_DIR):
            print(f"‚ùå Diret√≥rio {TRANSCRIPTIONS_DIR} n√£o existe")
            return jsonify({
                'success': True,
                'transcriptions': []
            })
        
        # Listar arquivos de transcri√ß√£o
        for filename in os.listdir(TRANSCRIPTIONS_DIR):
            if filename.endswith('_transcricao.txt'):
                print(f"üîç Verificando arquivo: {filename}")
                
                # Verificar se pertence ao usu√°rio (suporta ambos os formatos)
                belongs_to_user = (
                    filename.endswith(f"_{user_id}_transcricao.txt") or
                    safe_user_email in filename
                )
                
                if belongs_to_user:
                    print(f"‚úÖ Arquivo pertence ao usu√°rio: {filename}")
                    
                    filepath = os.path.join(TRANSCRIPTIONS_DIR, filename)
                    file_size = os.path.getsize(filepath)
                    
                    # Obter data de modifica√ß√£o
                    modified_time = os.path.getmtime(filepath)
                    modified_date = datetime.fromtimestamp(modified_time).strftime('%d/%m/%Y %H:%M')
                    
                    # Ler primeiras linhas para preview
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            content = f.read()
                            preview = content[:200] + '...' if len(content) > 200 else content
                    except:
                        preview = "Erro ao ler arquivo"
                    
                    # Nome original do arquivo de √°udio
                    audio_filename = filename.replace('_transcricao.txt', '.wav')
                    
                    # Verificar se existe resumo
                    summary_filename = filename.replace('_transcricao.txt', '_resumo.txt')
                    summary_path = os.path.join(TRANSCRIPTIONS_DIR, summary_filename)
                    has_summary = os.path.exists(summary_path)
                    
                    transcriptions.append({
                        'filename': filename,
                        'audio_filename': audio_filename,
                        'size': file_size,
                        'modified_date': modified_date,
                        'preview': preview,
                        'has_summary': has_summary
                    })
                else:
                    print(f"‚ùå Arquivo n√£o pertence ao usu√°rio: {filename}")
        
        print(f"‚úÖ Encontradas {len(transcriptions)} transcri√ß√µes")
        
        return jsonify({
            'success': True,
            'transcriptions': transcriptions
        })
        
    except Exception as e:
        print(f"‚ùå Erro ao listar transcri√ß√µes: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Erro ao listar transcri√ß√µes: {str(e)}'
        }), 500

@audio_bp.route('/api/view_transcription/<filename>', methods=['GET'])
@login_required
def api_view_transcription(filename):
    """Rota API para visualizar transcri√ß√£o - compatibilidade com React"""
    try:
        user_id = session['user_id']
        user_email = session.get('user_email', '')
        safe_user_email = user_email.replace('@', '_').replace('.', '_')
        
        # Verificar se o arquivo pertence ao usu√°rio (suporta ambos os formatos)
        belongs_to_user = (
            filename.endswith(f"_{user_id}_transcricao.txt") or
            safe_user_email in filename
        )
        
        if not belongs_to_user:
            return jsonify({
                'success': False, 
                'message': 'Acesso negado - arquivo n√£o pertence ao usu√°rio'
            }), 403
        
        filepath = os.path.join(TRANSCRIPTIONS_DIR, filename)
        
        if os.path.exists(filepath):
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
            
            return jsonify({
                'success': True,
                'content': content
            })
        else:
            return jsonify({
                'success': False, 
                'message': 'Arquivo de transcri√ß√£o n√£o encontrado'
            }), 404
    
    except Exception as e:
        print(f"‚ùå Erro ao carregar transcri√ß√£o: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Erro ao carregar transcri√ß√£o: {str(e)}'
        }), 500

@audio_bp.route('/api/export_summary_pdf/<filename>', methods=['GET'])
@login_required
def api_export_summary_pdf(filename):
    """Exporta resumo como PDF - compatibilidade com React"""
    try:
        user_id = session['user_id']
        user_email = session.get('user_email', '')
        safe_user_email = user_email.replace('@', '_').replace('.', '_')
        
        print(f"üîç Tentando exportar PDF para: {filename}")
        print(f"üë§ User ID: {user_id}")
        
        # Verificar se o arquivo pertence ao usu√°rio
        belongs_to_user = (
            filename.endswith(f"_{user_id}_transcricao.txt") or
            safe_user_email in filename
        )
        
        if not belongs_to_user:
            print(f"‚ùå Arquivo n√£o pertence ao usu√°rio: {filename}")
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o pertence ao usu√°rio'
            }), 403
        
        # Construir nome do arquivo de resumo
        summary_filename = filename.replace('_transcricao.txt', '_resumo.txt')
        summary_path = os.path.join(TRANSCRIPTIONS_DIR, summary_filename)
        
        print(f"üìÑ Procurando resumo em: {summary_path}")
        
        if not os.path.exists(summary_path):
            print(f"‚ùå Arquivo de resumo n√£o encontrado: {summary_path}")
            return jsonify({
                'success': False,
                'message': 'Resumo n√£o encontrado. Execute a an√°lise do Gemini primeiro.'
            }), 404
        
        # Ler resumo
        with open(summary_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print(f"üìñ Conte√∫do lido: {len(content)} caracteres")
        
        if not content.strip():
            return jsonify({
                'success': False,
                'message': 'Arquivo de resumo est√° vazio'
            }), 400
        
        # Criar PDF
        pdf_bytes = create_pdf_from_text(content, "Resumo da Consulta")
        
        if not pdf_bytes:
            return jsonify({
                'success': False,
                'message': 'Erro ao gerar PDF - verifique o conte√∫do do resumo'
            }), 500
        
        print(f"‚úÖ PDF gerado com sucesso: {len(pdf_bytes)} bytes")
        
        # Criar arquivo tempor√°rio para download
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
        temp_file.write(pdf_bytes)
        temp_file.close()
        
        pdf_filename = summary_filename.replace('.txt', '.pdf')
        
        return send_file(temp_file.name, as_attachment=True, download_name=pdf_filename)
        
    except Exception as e:
        print(f"‚ùå Erro ao exportar PDF: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'message': f'Erro interno ao exportar PDF: {str(e)}'
        }), 500

@audio_bp.route('/api/export_summary_docx/<filename>', methods=['GET'])
@login_required
def api_export_summary_docx(filename):
    """Exporta resumo como DOCX - compatibilidade com React"""
    try:
        user_id = session['user_id']
        user_email = session.get('user_email', '')
        safe_user_email = user_email.replace('@', '_').replace('.', '_')
        
        print(f"üîç Tentando exportar DOCX para: {filename}")
        print(f"üë§ User ID: {user_id}")
        
        # Verificar se o arquivo pertence ao usu√°rio
        belongs_to_user = (
            filename.endswith(f"_{user_id}_transcricao.txt") or
            safe_user_email in filename
        )
        
        if not belongs_to_user:
            print(f"‚ùå Arquivo n√£o pertence ao usu√°rio: {filename}")
            return jsonify({
                'success': False,
                'message': 'Arquivo n√£o pertence ao usu√°rio'
            }), 403
        
        # Construir nome do arquivo de resumo
        summary_filename = filename.replace('_transcricao.txt', '_resumo.txt')
        summary_path = os.path.join(TRANSCRIPTIONS_DIR, summary_filename)
        
        print(f"üìÑ Procurando resumo em: {summary_path}")
        
        if not os.path.exists(summary_path):
            print(f"‚ùå Arquivo de resumo n√£o encontrado: {summary_path}")
            return jsonify({
                'success': False,
                'message': 'Resumo n√£o encontrado. Execute a an√°lise do Gemini primeiro.'
            }), 404
        
        # Ler resumo
        with open(summary_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print(f"üìñ Conte√∫do lido: {len(content)} caracteres")
        
        if not content.strip():
            return jsonify({
                'success': False,
                'message': 'Arquivo de resumo est√° vazio'
            }), 400
        
        # Criar DOCX
        docx_bytes = create_docx_from_text(content, "Resumo da Consulta")
        
        if not docx_bytes:
            return jsonify({
                'success': False,
                'message': 'Erro ao gerar DOCX - verifique o conte√∫do do resumo'
            }), 500
        
        print(f"‚úÖ DOCX gerado com sucesso: {len(docx_bytes)} bytes")
        
        # Criar arquivo tempor√°rio para download
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.docx')
        temp_file.write(docx_bytes)
        temp_file.close()
        
        docx_filename = summary_filename.replace('.txt', '.docx')
        
        return send_file(temp_file.name, as_attachment=True, download_name=docx_filename)
        
    except Exception as e:
        print(f"‚ùå Erro ao exportar DOCX: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'message': f'Erro interno ao exportar DOCX: {str(e)}'
        }), 500

@audio_bp.route('/api/save_chunk', methods=['POST'])
@login_required
def api_save_chunk():
    """Salva chunk de grava√ß√£o e monta arquivo final quando completo"""
    try:
        data = request.json
        session_id = data.get('session_id')
        chunk_index = data.get('chunk_index')
        audio_data = data.get('audio')
        is_last = data.get('is_last', False)
        mime_type = data.get('mime_type', 'audio/webm')
        
        if not all([session_id, audio_data is not None, chunk_index is not None]):
            return jsonify({
                'success': False,
                'message': 'Dados incompletos para o chunk'
            }), 400
        
        user_id = session.get('user_id', 'unknown')
        
        # Decodificar base64
        if audio_data.startswith('data:audio'):
            audio_data = audio_data.split(',', 1)[1]
        
        try:
            audio_bytes = base64.b64decode(audio_data)
        except Exception as e:
            return jsonify({
                'success': False,
                'message': 'Erro ao decodificar chunk de √°udio'
            }), 400
        
        # Criar diret√≥rio tempor√°rio para chunks
        temp_dir = os.path.join(RECORDINGS_DIR, 'temp_chunks')
        os.makedirs(temp_dir, exist_ok=True)
        
        # Salvar chunk tempor√°rio
        chunk_filename = f"{session_id}_chunk_{chunk_index:03d}.tmp"
        chunk_path = os.path.join(temp_dir, chunk_filename)
        
        with open(chunk_path, 'wb') as f:
            f.write(audio_bytes)
        
        print(f"‚úÖ Chunk {chunk_index} salvo: {len(audio_bytes)} bytes")
        
        # Se √© o √∫ltimo chunk, montar arquivo final
        if is_last:
            final_filename = assemble_chunks(session_id, user_id, chunk_index + 1)
            return jsonify({
                'success': True,
                'message': f'Grava√ß√£o completa! {chunk_index + 1} chunks processados.',
                'final_filename': final_filename
            })
        else:
            return jsonify({
                'success': True,
                'message': f'Chunk {chunk_index} recebido com sucesso'
            })
        
    except Exception as e:
        print(f"‚ùå Erro ao processar chunk: {e}")
        return jsonify({
            'success': False,
            'message': f'Erro ao processar chunk: {str(e)}'
        }), 500

def assemble_chunks(session_id, user_id, total_chunks):
    """Monta chunks em arquivo final"""
    try:
        temp_dir = os.path.join(RECORDINGS_DIR, 'temp_chunks')
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        final_filename = f"recording_{timestamp}_{user_id}.wav"
        final_path = os.path.join(RECORDINGS_DIR, final_filename)
        
        # Lista para armazenar todos os segmentos de √°udio
        audio_segments = []
        
        print(f"üîß Montando {total_chunks} chunks para sess√£o {session_id}")
        
        # Carregar e processar cada chunk
        for i in range(total_chunks):
            chunk_filename = f"{session_id}_chunk_{i:03d}.tmp"
            chunk_path = os.path.join(temp_dir, chunk_filename)
            
            if os.path.exists(chunk_path):
                try:
                    # Carregar chunk com pydub
                    chunk_segment = AudioSegment.from_file(chunk_path)
                    audio_segments.append(chunk_segment)
                    print(f"‚úÖ Chunk {i} carregado: {len(chunk_segment)}ms")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao carregar chunk {i}: {e}")
                    # Tentar carregar como bytes brutos
                    with open(chunk_path, 'rb') as f:
                        chunk_bytes = f.read()
                    chunk_segment = AudioSegment.from_file(io.BytesIO(chunk_bytes))
                    audio_segments.append(chunk_segment)
            else:
                print(f"‚ùå Chunk {i} n√£o encontrado: {chunk_path}")
        
        if not audio_segments:
            raise Exception("Nenhum chunk v√°lido encontrado")
        
        # Concatenar todos os segmentos
        print(f"üîó Concatenando {len(audio_segments)} segmentos...")
        final_audio = audio_segments[0]
        for segment in audio_segments[1:]:
            final_audio += segment
        
        # FUN√á√ÉO ROBUSTA: Processar √°udio final para compatibilidade com diferentes dispositivos
        final_audio = process_audio_for_device_compatibility(final_audio, "Chunks montados")
        
        # CORRE√á√ÉO: Exportar arquivo final com configura√ß√µes espec√≠ficas para evitar problemas de velocidade
        print(f"üîß Exportando arquivo final com configura√ß√µes otimizadas...")
        final_audio.export(
            final_path,
            format="wav",
            parameters=[
                "-acodec", "pcm_s16le",  # PCM 16-bit
                "-ar", str(final_audio.frame_rate),  # Manter sample rate
                "-ac", "1"  # Mono
            ]
        )
        
        file_size = os.path.getsize(final_path)
        duration = len(final_audio) / 1000  # dura√ß√£o em segundos
        
        print(f"‚úÖ Arquivo final criado: {final_filename}")
        print(f"üìä Tamanho: {file_size} bytes, Dura√ß√£o: {duration:.1f}s")
        
        # Limpar chunks tempor√°rios
        cleanup_temp_chunks(session_id, total_chunks, temp_dir)
        
        return final_filename
        
    except Exception as e:
        print(f"‚ùå Erro ao montar chunks: {e}")
        raise

def cleanup_temp_chunks(session_id, total_chunks, temp_dir):
    """Remove chunks tempor√°rios ap√≥s montagem"""
    try:
        for i in range(total_chunks):
            chunk_filename = f"{session_id}_chunk_{i:03d}.tmp"
            chunk_path = os.path.join(temp_dir, chunk_filename)
            if os.path.exists(chunk_path):
                os.remove(chunk_path)
        print(f"üßπ Chunks tempor√°rios removidos para sess√£o {session_id}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao limpar chunks tempor√°rios: {e}")

@audio_bp.route('/api/finalize_recording', methods=['POST'])
@login_required
def api_finalize_recording():
    """Finaliza grava√ß√£o adicionando nome do paciente"""
    try:
        data = request.json
        session_id = data.get('session_id')
        patient_name = data.get('patient_name', '')
        current_filename = data.get('final_filename')
        
        if not current_filename:
            return jsonify({
                'success': False,
                'message': 'Nome do arquivo n√£o fornecido'
            }), 400
        
        # Se h√° nome do paciente, renomear arquivo
        if patient_name:
            user_id = session.get('user_id', 'unknown')
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            safe_patient_name = sanitize_filename(patient_name)
            new_filename = f"{safe_patient_name}_{timestamp}_{user_id}.wav"
            
            current_path = os.path.join(RECORDINGS_DIR, current_filename)
            new_path = os.path.join(RECORDINGS_DIR, new_filename)
            
            if os.path.exists(current_path):
                os.rename(current_path, new_path)
                print(f"üìù Arquivo renomeado: {current_filename} -> {new_filename}")
                final_filename = new_filename
            else:
                final_filename = current_filename
        else:
            final_filename = current_filename
        
        return jsonify({
            'success': True,
            'message': 'Grava√ß√£o finalizada com sucesso!',
            'filename': final_filename
        })
        
    except Exception as e:
        print(f"‚ùå Erro ao finalizar grava√ß√£o: {e}")
        return jsonify({
            'success': False,
            'message': f'Erro ao finalizar grava√ß√£o: {str(e)}'
        }), 500

@audio_bp.route('/api/debug_files/<filename>', methods=['GET'])
@login_required
def debug_files(filename):
    """Debug: mostra status dos arquivos relacionados"""
    try:
        user_id = session['user_id']
        transcription_filename = filename.replace('.wav', '_transcricao.txt')
        summary_filename = filename.replace('.wav', '_resumo.txt')
        
        transcription_path = os.path.join(TRANSCRIPTIONS_DIR, transcription_filename)
        summary_path = os.path.join(TRANSCRIPTIONS_DIR, summary_filename)
        
        debug_info = {
            'user_id': user_id,
            'transcription_filename': transcription_filename,
            'summary_filename': summary_filename,
            'transcription_exists': os.path.exists(transcription_path),
            'summary_exists': os.path.exists(summary_path),
            'transcriptions_dir': os.path.abspath(TRANSCRIPTIONS_DIR),
            'files_in_dir': os.listdir(TRANSCRIPTIONS_DIR) if os.path.exists(TRANSCRIPTIONS_DIR) else []
        }
        
        return jsonify({
            'success': True,
            'debug_info': debug_info
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Erro no debug: {str(e)}'
        }), 500

